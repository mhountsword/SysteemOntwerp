@startuml
'https://plantuml.com/class-diagram

class Main {
-Console console
-PrintManager printManager
-Facade facade
+{static}void main(String[])
+void run(String[])
+void menu()
-void initialize()
+String stringInput()
+int menuChoice(int)
+int numberInput()
+int numberInput(int, int)
+void showPrints()
+void showSpools()
+void showPrinters()
}

class Reader {
-Scanner scanner
+ArrayList<Print> readPrintsFromFile(String)
+ArrayList<Printers> readPrintersFromFile(String)
+ArrayList<Spools> readSpoolsFromFile(String)
}

Main::menuChoice *.. Facade
Main::initialize *.. Reader

+class PrinterManager{
-List<Printer> printers
-List<Printer> freePrinters
-List<Spool> spools
-List<Spool> freeSpools
+void startInitialQueue()
+void addPrinter(type, String[] printerValues)
+void registerPrinterFailure(int)
+void registerCompletion(int)
+void printError(String)
+List<Printer> getPrinters()
+List<PrintTask> getPrintTasks()
}
PrinterManager::printers *-- Printer
PrinterManager::freePrinters *.. Printer
PrinterManager::pendingPrintTasks o-- PrintTask
PrinterManager::spools *-- Spool
PrinterManager::freeSpools *.. Spool
PrinterManager::runningPrintTask *.. Printer
PrinterManager::runningPrintTask *.. PrintTask

+class Facade{
    + void addTask(PrintTask task)
    + void assignTasks(PrinterManager printerManager)
    + void completeTask(Printer printer)
    + void handleTaskFailure(Printer printer)
}
Facade::runningTasks *-- Printer
Facade::runningTasks *-- PrintTask
Facade o-- PrinterManager
Facade o-- PrintTask

+class PrintManager{
-List<Print> prints
+List<Print> getPrints()
+Print findPrint(String)
+Print findPrint(int)
+void showPendingPrintTasks()
}
PrintManager::prints *.. Print


+class SpoolManager{
-List<Spool> spools
+boolean ContainsSpool(final list<Spool>, final String)
+list<Spool> getSpools()
+void addSpool(Spool)
+Spool getSpoolById(int)
}

SpoolManager::spools *.. Spool

+class PrintTask{
-Print print
-List<String> colors
-FilamentType filamentType
+String toString()
+List<String> getColors()
+List<PrintTask> getPendingPrintTasks()
+FilamentType getFilamentType()
+Print getPrint()
+PrintTask getPrinterCurrentTask(Printer, printers)
}

PrintTask::print *.. Print
PrintTask::filamentType *.. FilamentType

+enum FilamentType{
    PLA
    PETG
    ABS
}

+abstract class Printer{
- int id
-String name
-String manufacturer
+ int getId()
+ String getName()
- final int maxX;
- final int maxY;
- final int maxZ;
- Spool currentSpool;
- boolean housed;
+ boolean isHoused()
+ {abstract} int CalculatePrintTime(String)
+ {abstract} void setCurrentSpools(ArrayList<Spool>)
+ {abstract} boolean printFits(Print)
+String toString()

}
Printer::currentSpool *-- Spool

+class Print{
-String name
- int height
- int width
- int length
- List<Double> filamentLength
- int printTime
+ String getName()
+ int getHeight()
+ int getWidth()
+ int getlength()
+ List<Double> getFilamentLength()
+ int getPrintTime()
}

+class Spool{
- final int id;
- final String color;
- final FilamentType filamentType;
-double lenght;
+int getId()
+double getlength()
+String getColor()
+FilamentType getFilamentType()
+ boolean spoolMatch()
+boolean reduceLength()
}

Spool::filamentType o-- FilamentType


-class StandardFDM{
+void setCurrentSpool(Spool spool)
+Spool getCurrentSpool()
+ArrayList<Spool> getCurrentSpools()
+boolean printFits(Print print)
+StandardFDM createNewFDMPrinter(String[] printerValues)
+String toString()
}

Printer *-- StandardFDM

-class MultiColor{
- int maxColors;
- ArrayList<Spool> spools
+void setCurrentSpools((ArrayList<Spool>)
+ArrayList<Spool> getCurrentSpools()
+MultiColor createNewMultiColorPrinter(String[] printerValues)
}
Printer <-- MultiColor
MultiColor::spools <-- Spool

+class PrinterFactory{
Printer createNewPrinter(String type, String[] printerValues)
}
PrinterManager::addPrinter --> PrinterFactory
PrinterFactory --> StandardFDM::createNewFDMPrinter
PrinterFactory --> MultiColor::createNewMultiColorPrinter



@enduml